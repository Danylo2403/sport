{"version":3,"file":"static/js/182.d0009bff.chunk.js","mappings":"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","sources":["components/AuthLayout/AuthLayout.jsx","components/FormStyle/StyledForm.styled.jsx","pages/SignInPage.jsx"],"sourcesContent":["import {\n  Container,\n  ContainerForm,\n  Title,\n  Text,\n  TextLinkIn,\n  StyledLink,\n  IconPlay,\n  SvgPlay,\n  Tutorial,\n  TextTutorial,\n  Calories,\n  IconMan,\n  SectionMan,\n  TitleMan,\n  SpanMan,\n  Icon,\n  Block,\n  IconManSvg,\n  Photo,\n} from './AuthLayout.styled';\nimport sprite from '../../img/pulse-icons.svg';\n\nconst AuthLayout = ({\n  title,\n  paragraph,\n  bottomText,\n  linkName,\n  linkUrl,\n  children,\n}) => {\n  return (\n    <Container className=\"container\">\n      <Photo />\n      <ContainerForm>\n        <Title>{title}</Title>\n        <Text>{paragraph}</Text>\n\n        {children}\n\n        <TextLinkIn>\n          {bottomText} <StyledLink to={linkUrl}>{linkName}</StyledLink>\n        </TextLinkIn>\n      </ContainerForm>\n\n      <IconPlay>\n        <Icon>\n          <SvgPlay>\n            <use href={`${sprite}#icon-Polygon-1`}></use>\n          </SvgPlay>\n        </Icon>\n\n        <Block>\n          <Tutorial>\n            350+<TextTutorial>Video tutorial</TextTutorial>\n          </Tutorial>\n        </Block>\n      </IconPlay>\n      <Calories>\n        <IconMan>\n          <IconManSvg>\n            <use href={`${sprite}#icon-Group`}></use>\n          </IconManSvg>\n        </IconMan>\n        <SectionMan>\n          <TitleMan>500</TitleMan>\n          <SpanMan>cal</SpanMan>\n        </SectionMan>\n      </Calories>\n    </Container>\n  );\n};\n\nexport default AuthLayout;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  // gap:18px;\n\n  @media screen and (min-width: 768px) {\n    width: 364px;\n    // gap: 20px;\n  }\n`;\n\nexport const Contsform = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  justify-content: center;\n`;\n\nexport const StyledFormIn = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n    width: 364px;\n    // gap: 20px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding: 0;\n  margin: 0;\n  background-color: inherit;\n  border: 1px solid rgba(239, 237, 232, 0.3);\n  color: #efede8;\n  width: 100%;\n  height: 46px;\n  border-radius: 12px;\n  padding-left: 14px;\n  outline: none;\n\n  &::placeholder {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.28;\n\n    color: rgba(239, 237, 232, 0.6);\n  }\n\n  &:hover {\n    border: 1px solid #e6533c;\n  }\n  &:focus {\n    border: 1px solid #e6533c;\n  }\n  &.default {\n    outline: 1px solid rgba(239, 237, 232, 0.6);\n  }\n  &.error {\n    border: 1px solid #d80027;\n  }\n  &.success {\n    border: 1px solid #3cbf61;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: 1.5;\n  }\n`;\n\nexport const Button = styled.button`\n  font-family: 'Roboto', sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #e6533c;\n  width: 136px;\n  height: 42px;\n  border-radius: 12px;\n  border: none;\n  color: #efede8;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.25;\n  margin-top: 28px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #ef8964;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 190px;\n    height: 56px;\n    margin-top: 64px;\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const MessageInput = styled.div`\n  position: absolute;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nexport const SvgIcon = styled.svg`\n  fill: #d80027;\n  width: 16px;\n  height: 16px;\n  margin-right: 4px;\n  margin-top: 1px;\n`;\n\nexport const ErrorText = styled.p`\n  font-family: 'Roboto', sans-serif;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 1.5;\n  letter-spacing: 0.01em;\n  text-align: left;\n  color: #d80027;\n`;\n\nexport const SuccessText = styled.p`\n  font-family: 'Roboto', sans-serif;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 1.5;\n  letter-spacing: 0.01em;\n  text-align: left;\n  color: #3cbf61;\n`;\n\nexport const SuccessSvg = styled.svg`\n  fill: #3cbf61;\n  width: 16px;\n  height: 16px;\n  margin-right: 4px;\n`;\nexport const Icons = styled.svg`\n  stroke: rgba(239, 237, 232, 1);\n  width: 20px;\n  height: 20px;\n  position: absolute;\n\n  @media screen and (min-width: 768px) {\n    position: absolute;\n    left: 360px;\n    bottom: 240px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    position: absolute;\n    left: 422px;\n    bottom: 230px;\n  }\n`;\nexport const IconsIn = styled.svg`\n  stroke: rgba(239, 237, 232, 1);\n  width: 20px;\n  height: 20px;\n  position: absolute;\n\n  @media screen and (min-width: 768px) {\n    left: 360px;\n    top: 332px;\n  }\n\n  /* @media screen and (min-width: 1440px) {\n    position: absolute;\n    left: 426px;\n  } */\n`;\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { fetchUserLogIn } from '../redux/user/operations';\nimport pulseIcon from '../img/pulse-icons.svg';\nimport {\n  StyledFormIn,\n  Input,\n  Button,\n  MessageInput,\n  ErrorText,\n  SvgIcon,\n  SuccessText,\n  SuccessSvg,\n  IconsIn,\n} from '../components/FormStyle/StyledForm.styled';\n\nimport AuthLayout from 'components/AuthLayout/AuthLayout';\n\nfunction SignInPage() {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const SignIn = Yup.object().shape({\n    email: Yup.string()\n      .min(3, 'The email address must be at least 3 characters long!')\n      .max(20, 'The email address is too long!')\n      .email('Error email')\n      .required('Required'),\n    password: Yup.string().required('Required').min(6).max(20),\n  });\n\n  return (\n    <AuthLayout\n      title=\"Sign in\"\n      paragraph=\"Welcome! Please enter your credentials to login to the platform:\"\n      bottomText=\"Don’t have an account?\"\n      linkName=\"Sign up\"\n      linkUrl=\"/register\"\n    >\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={SignIn}\n        onSubmit={values => {\n          dispatch(fetchUserLogIn(values));\n        }}\n      >\n        {({ errors, touched }) => (\n          <StyledFormIn>\n            <label htmlFor=\"email\">\n              <Input\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                type=\"email\"\n                className={`\n                    ${errors.email && touched.email ? 'error' : ''}\n                    ${touched.email && !errors.email ? 'success' : ''}`}\n              />\n\n              {errors.email && touched.email && (\n                <MessageInput>\n                  <SvgIcon>\n                    <use href={pulseIcon + '#checkbox'}></use>\n                  </SvgIcon>\n                  <ErrorMessage component={ErrorText} name=\"email\" />\n                </MessageInput>\n              )}\n              {!errors.email && touched.email && (\n                <MessageInput>\n                  <SuccessSvg>\n                    <use href={`${pulseIcon}#checkbox`} />\n                  </SuccessSvg>\n                  <SuccessText>Success email</SuccessText>\n                </MessageInput>\n              )}\n            </label>\n            <label htmlFor=\"password\">\n              <Input\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                type={showPassword ? 'text' : 'password'}\n                className={`${\n                  errors.password && touched.password ? 'error' : ''\n                }\n                                    ${\n                                      touched.password && !errors.password\n                                        ? 'success'\n                                        : ''\n                                    }`}\n              />\n              {errors.password && touched.password && (\n                <MessageInput>\n                  <SvgIcon>\n                    <use href={`${pulseIcon}#checkbox`} />\n                  </SvgIcon>\n                  <ErrorMessage component={ErrorText} name=\"password\" />\n                </MessageInput>\n              )}\n              {!errors.password && touched.password && (\n                <MessageInput>\n                  <SuccessSvg>\n                    <use href={`${pulseIcon}#checkbox`} />\n                  </SuccessSvg>\n                  <SuccessText>Success password</SuccessText>\n                </MessageInput>\n              )}\n              {!showPassword && (\n                <IconsIn\n                  onClick={() => setShowPassword(!showPassword)}\n                  style={{\n                    left:\n                      window.innerWidth >= 1440\n                        ? '424px'\n                        : window.innerWidth >= 768\n                        ? '360px'\n                        : '320px',\n                    top:\n                      window.innerWidth >= 1440\n                        ? '342px'\n                        : window.innerWidth >= 768\n                        ? '332px'\n                        : '275px',\n                  }}\n                >\n                  <use href={pulseIcon + '#icon-eye'}></use>\n                </IconsIn>\n              )}\n              {showPassword && (\n                <IconsIn\n                  onClick={() => setShowPassword(!showPassword)}\n                  style={{\n                    left:\n                      window.innerWidth >= 1440\n                        ? '424px'\n                        : window.innerWidth >= 768\n                        ? '360px'\n                        : '320px',\n                    top:\n                      window.innerWidth >= 1440\n                        ? '342px'\n                        : window.innerWidth >= 768\n                        ? '332px'\n                        : '275px',\n                  }}\n                >\n                  <use href={pulseIcon + '#icon-eye-off'}></use>\n                </IconsIn>\n              )}\n            </label>\n\n            <Button type=\"submit\">Sign In</Button>\n          </StyledFormIn>\n        )}\n      </Formik>\n    </AuthLayout>\n  );\n}\n\nexport default SignInPage;\n"],"names":["_ref","title","paragraph","bottomText","linkName","linkUrl","children","_jsxs","Container","className","_jsx","Photo","ContainerForm","Title","Text","TextLinkIn","StyledLink","to","IconPlay","Icon","SvgPlay","href","concat","sprite","Block","Tutorial","TextTutorial","Calories","IconMan","IconManSvg","SectionMan","TitleMan","SpanMan","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Contsform","_templateObject2","StyledFormIn","_templateObject3","Input","Field","_templateObject4","Button","_templateObject5","MessageInput","_templateObject6","SvgIcon","_templateObject7","ErrorText","_templateObject8","SuccessText","_templateObject9","SuccessSvg","_templateObject10","Icons","_templateObject11","IconsIn","_templateObject12","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","SignIn","Yup","shape","email","min","max","required","password","AuthLayout","Formik","initialValues","validationSchema","onSubmit","values","fetchUserLogIn","errors","touched","htmlFor","id","name","placeholder","type","pulseIcon","ErrorMessage","component","onClick","style","left","window","innerWidth","top"],"sourceRoot":""}