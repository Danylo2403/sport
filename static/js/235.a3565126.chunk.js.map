{"version":3,"file":"static/js/235.a3565126.chunk.js","mappings":"2OA+GA,UA7FA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACjBC,GAAuBC,EAAAA,EAAAA,WAAS,GAAzBC,GAA+BC,EAAAA,EAAAA,GAAAH,EAAA,GAAnB,GAEbI,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,SAAS,YAC3CC,MAAON,EAAAA,KACJG,IAAI,EAAG,yDACPC,IAAI,GAAI,kCACRE,MAAM,eACND,SAAS,YACZE,SAAUP,EAAAA,KACPG,IAAI,EAAG,4DACPC,IAAI,GAAI,oCACRC,SAAS,cAGd,OACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,MAAM,UACNC,UAAU,uIACVC,WAAW,2BACXC,SAAS,UACTC,QAAQ,SAAQC,UAEhBP,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CACLC,cAAe,CACbX,MAAO,GACPJ,KAAM,GACNK,SAAU,IAEZW,iBAAkBnB,EAClBoB,SAAU,SAAAC,GACR3B,GAAS4B,EAAAA,EAAAA,IAAkBD,GAC7B,EAAEL,SAED,SAAAO,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACjBC,EAAAA,EAAAA,MAACC,EAAAA,GAAU,CAAAX,SAAA,EACTU,EAAAA,EAAAA,MAACE,EAAAA,GAAI,CAAAZ,SAAA,EACHP,EAAAA,EAAAA,KAAA,SAAOoB,QAAQ,OAAMb,UACnBP,EAAAA,EAAAA,KAACqB,EAAAA,GAAK,CACJC,GAAG,OACH5B,KAAK,OACL6B,YAAY,OACZC,KAAK,OACLC,UAAc,UAASC,OAAA,qBACvBV,EAAQtB,OAASqB,EAAOrB,MAAQ,UAAS,sBAAAgC,OACzCV,EAAQtB,MAAQqB,EAAOrB,MAAQ,cAGnCM,EAAAA,EAAAA,KAAA,SAAOoB,QAAQ,QAAOb,UACpBP,EAAAA,EAAAA,KAACqB,EAAAA,GAAK,CACJC,GAAG,QACH5B,KAAK,QACL6B,YAAY,QACZC,KAAK,QACLC,UAAc,UAASC,OAAA,yBACnBV,EAAQlB,QAAUiB,EAAOjB,OAAS,UAAS,0BAAA4B,OAC3CV,EAAQlB,OAASiB,EAAOjB,OAAS,cAGzCmB,EAAAA,EAAAA,MAAA,SAAOG,QAAQ,WAAUb,SAAA,EACvBP,EAAAA,EAAAA,KAACqB,EAAAA,GAAK,CACJG,KAAMnC,EAAe,OAAS,WAC9BiC,GAAG,WACH5B,KAAK,WACL6B,YAAY,WACZE,UAAc,UAASC,OAAA,yBACnBV,EAAQjB,WAAagB,EAAOhB,UAAY,UAAS,0BAAA2B,OACjDV,EAAQjB,UAAYgB,EAAOhB,UAAY,WAE5CgB,EAAOhB,UAAYiB,EAAQjB,WAC1BC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CAAApB,UACNP,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAAArB,UACRP,EAAAA,EAAAA,KAAC6B,EAAAA,GAAY,CAACC,UAAU,IAAIpC,KAAK,kBAIrCqB,EAAOhB,UAAYiB,EAAQjB,WAC3BC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CAAApB,UACNP,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAAArB,SAAC,8BAKnBP,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CAACP,KAAK,SAAQjB,SAAC,cACX,KAKvB,C","sources":["pages/SignUpPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport React from 'react';\nimport { fetchUserRegister } from '../redux/user/operations';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\n\nimport {\n  StyledForm,\n  Input,\n  Button,\n  Message,\n  ErrorText,\n  Test,\n} from '../components/AuthLayout/StyledForm.styled';\n\nimport AuthLayout from '../components/AuthLayout/AuthLayout';\n\nfunction SignInPage() {\n  const dispatch = useDispatch();\n  const [showPassword] = useState(false);\n\n  const SignUp = Yup.object().shape({\n    name: Yup.string().min(2).max(20).required('Required'),\n    email: Yup.string()\n      .min(6, 'The email address must be at least 6 characters long!')\n      .max(20, 'The email address is too long!')\n      .email('Error email')\n      .required('Required'),\n    password: Yup.string()\n      .min(6, 'The password address must be at least 6 characters long!')\n      .max(20, 'The password length is too long!')\n      .required('Required'),\n  });\n\n  return (\n    <AuthLayout\n      title=\"Sign up\"\n      paragraph=\"Thank you for your interest in our platform. To complete the registration process, please provide us with the following information.\"\n      bottomText=\"Already have an account?\"\n      linkName=\"Sign In\"\n      linkUrl=\"/login\"\n    >\n      <Formik\n        initialValues={{\n          email: '',\n          name: '',\n          password: '',\n        }}\n        validationSchema={SignUp}\n        onSubmit={values => {\n          dispatch(fetchUserRegister(values));\n        }}\n      >\n        {({ errors, touched }) => (\n          <StyledForm>\n            <Test>\n              <label htmlFor=\"name\">\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  type=\"text\"\n                  className={`${'defoult'}\n                ${touched.name && !errors.name && 'success'}\n                ${touched.name && errors.name && 'error'}`}\n                />\n              </label>\n              <label htmlFor=\"email\">\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  type=\"email\"\n                  className={`${'defoult'}\n                    ${touched.email && !errors.email && 'success'}\n                    ${touched.email && errors.email && 'error'}`}\n                />\n              </label>\n              <label htmlFor=\"password\">\n                <Input\n                  type={showPassword ? 'text' : 'password'}\n                  id=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  className={`${'defoult'}\n                    ${touched.password && !errors.password && 'success'}\n                    ${touched.password && errors.password && 'error'}`}\n                />\n                {errors.password && touched.password && (\n                  <Message>\n                    <ErrorText>\n                      <ErrorMessage component=\"p\" name=\"password\" />\n                    </ErrorText>\n                  </Message>\n                )}\n                {!errors.password && touched.password && (\n                  <Message>\n                    <ErrorText>Success password</ErrorText>\n                  </Message>\n                )}\n              </label>\n            </Test>\n            <Button type=\"submit\">Sign Up</Button>\n          </StyledForm>\n        )}\n      </Formik>\n    </AuthLayout>\n  );\n}\n\nexport default SignInPage;\n"],"names":["dispatch","useDispatch","_useState","useState","showPassword","_slicedToArray","SignUp","Yup","shape","name","min","max","required","email","password","_jsx","AuthLayout","title","paragraph","bottomText","linkName","linkUrl","children","Formik","initialValues","validationSchema","onSubmit","values","fetchUserRegister","_ref","errors","touched","_jsxs","StyledForm","Test","htmlFor","Input","id","placeholder","type","className","concat","Message","ErrorText","ErrorMessage","component","Button"],"sourceRoot":""}